'use server';
/**
 * @fileOverview Maps extracted text to numbers based on the letters in 'CHARLESTON'.
 *
 * - mapLetters - A function that handles the letter mapping process.
 * - LetterMappingInput - The input type for the mapLetters function.
 * - LetterMappingOutput - The return type for the mapLetters function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const LetterMappingInputSchema = z.object({
  extractedText: z.string().describe('The text extracted from the image.'),
});
export type LetterMappingInput = z.infer<typeof LetterMappingInputSchema>;

const LetterMappingOutputSchema = z.object({
  numericalCode: z
    .string()
    .describe(
      'The numerical code generated by mapping the letters in the extracted text to the letters in CHARLESTON.'
    ),
  shouldMap: z
    .boolean()
    .describe(
      'Whether the extracted text should be used for mapping. If false, the numericalCode should be empty.'
    ),
});
export type LetterMappingOutput = z.infer<typeof LetterMappingOutputSchema>;

export async function mapLetters(input: LetterMappingInput): Promise<LetterMappingOutput> {
  return mapLettersFlow(input);
}

const shouldMapText = ai.defineTool(
  {
    name: 'shouldMapText',
    description: 'Determines whether the extracted text is suitable for mapping to the CHARLESTON letters.',
    inputSchema: z.object({
      extractedText: z.string().describe('The text extracted from the image.'),
    }),
    outputSchema: z.boolean(),
  },
  async (input) => {
    // Implement logic to determine if the text is suitable for mapping
    // This could involve checking for a minimum length, presence of certain characters, etc.
    // For now, let's just return true if the text is not empty
    return input.extractedText.trim().length > 0;
  }
);

const prompt = ai.definePrompt({
  name: 'letterMappingPrompt',
  input: {schema: LetterMappingInputSchema},
  output: {schema: LetterMappingOutputSchema},
  tools: [shouldMapText],
  prompt: `You are a helpful assistant tasked with mapping letters from extracted text to numbers based on the letters in "CHARLESTON".

  The mapping is as follows:
  C = 1
  H = 2
  A = 3
  R = 4
  L = 5
  E = 6
  S = 7
  T = 8
  O = 9
  N = 0

  Given the extracted text: "{{extractedText}}", determine if the text is suitable for mapping using the shouldMapText tool. If the tool returns true, map the letters in the extracted text to their corresponding numbers based on the "CHARLESTON" mapping. If a letter is not in "CHARLESTON", ignore it.

  If the shouldMapText tool returns false, set the numericalCode to an empty string and shouldMap to false.

  The final numerical code must be a string.

  Example:
  Extracted Text: "CARL"
  Numerical Code: "1345"

  Extracted Text: "HELLO"
  Numerical Code: "26559"

  Extracted Text: "XYZ"
  Numerical Code: ""

  Extracted Text: ""
  Numerical Code: ""
  `,
});

const mapLettersFlow = ai.defineFlow(
  {
    name: 'mapLettersFlow',
    inputSchema: LetterMappingInputSchema,
    outputSchema: LetterMappingOutputSchema,
  },
  async input => {
    // Directly call the prompt which will use the tool.
    // The prompt is designed to handle the logic of when to call the tool and what to do with its output.
    const {output} = await prompt(input);
    
    // The prompt output schema includes `shouldMap`. We can rely on the prompt to set this correctly.
    // If the tool determined no mapping should occur, or if no relevant letters are found,
    // the prompt should return an empty numericalCode and appropriate shouldMap value.
    return output!;
  }
);

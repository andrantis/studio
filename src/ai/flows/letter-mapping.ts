'use server';
/**
 * @fileOverview Maps extracted text to numbers based on the letters in 'CHARLESTON'.
 *
 * - mapLetters - A function that handles the letter mapping process.
 * - LetterMappingInput - The input type for the mapLetters function.
 * - LetterMappingOutput - The return type for the mapLetters function.
 */

import {z} from 'genkit';

const LetterMappingInputSchema = z.object({
  extractedText: z.string().describe('The text extracted from the image.'),
});
export type LetterMappingInput = z.infer<typeof LetterMappingInputSchema>;

const LetterMappingOutputSchema = z.object({
  numericalCode: z
    .string()
    .describe(
      'The numerical code generated by mapping the letters in the extracted text to the letters in CHARLESTON.'
    ),
  shouldMap: z
    .boolean()
    .describe(
      'Whether the extracted text should be used for mapping. If false, the numericalCode should be empty.'
    ),
});
export type LetterMappingOutput = z.infer<typeof LetterMappingOutputSchema>;

const CHARLESTON_MAP: { [key: string]: string } = {
  C: '1',
  H: '2',
  A: '3',
  R: '4',
  L: '5',
  E: '6',
  S: '7',
  T: '8',
  O: '9',
  N: '0',
};

export async function mapLetters(input: LetterMappingInput): Promise<LetterMappingOutput> {
  const { extractedText } = input;
  // Convert to uppercase to handle mixed-case input, and trim whitespace
  const cleanedText = extractedText.trim().toUpperCase();

  if (cleanedText === '') {
    // If the input text is empty or only whitespace after trimming
    return { numericalCode: '', shouldMap: false };
  }

  let numericalCode = '';
  for (const char of cleanedText) {
    if (CHARLESTON_MAP[char]) {
      numericalCode += CHARLESTON_MAP[char];
    }
  }

  if (numericalCode === '') {
    // If no characters from the input text were found in the CHARLESTON_MAP (e.g., input was "XYZ")
    return { numericalCode: '', shouldMap: false };
  }

  // If we have a numerical code, it means mapping was successful and relevant
  return { numericalCode, shouldMap: true };
}
